// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Organization {
  id               String          @id @default(cuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  name             String
  memberships      Membership[]
  activeUsers      User[]
  tickets          Ticket[]
  invitations      Invitation[]
  stripeCustomerId String?
  stripeCustomer   StripeCustomer?
}

model StripeCustomer {
  organizationId     String                    @unique
  organization       Organization              @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  customerId         String                    @unique
  subscriptionId     String?
  subscriptionStatus StripeSubscriptionStatus?
  productId          String?
  priceId            String?
}

enum StripeSubscriptionStatus {
  active
  incomplete
  incomplete_expired
  past_due
  canceled
  unpaid
  trialing
  paused
}

model Invitation {
  tokenHash      String           @unique
  email          String           @unique
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  status         InvitationStatus @default(PENDING)

  @@index([organizationId])
}

enum InvitationStatus {
  PENDING
  ACCEPTED_WITHOUT_ACCOUNT
}

model Membership {
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  joinedAt       DateTime       @default(now())
  membershipRole MembershipRole

  canDeleteTicket Boolean @default(true)

  @@id([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
}

enum MembershipRole {
  ADMIN
  MEMBER
}

model User {
  id                      String                   @id
  username                String                   @unique
  email                   String                   @unique
  emailVerified           Boolean
  hashedPassword          String
  sessions                Session[]
  passwordResetTokens     PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]
  memberships             Membership[]
  activeOrganization      Organization?            @relation(fields: [activeOrganizationId], references: [id], onDelete: SetNull)
  activeOrganizationId    String?
  tickets                 Ticket[]
  comments                Comment[]

  @@index([activeOrganizationId])
}

model Session {
  id        String   @id
  expiresAt DateTime
  userId    String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

model PasswordResetToken {
  tokenHash String   @unique
  expiresAt DateTime
  userId    String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  code      String
  expiresAt DateTime
  email     String
  userId    String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

model Ticket {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  title          String
  content        String       @db.VarChar(1024)
  status         TicketStatus @default(OPEN)
  deadline       String
  bounty         Int
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  comments       Comment[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@index([organizationId])
  @@index([userId])
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  DONE
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String   @db.VarChar(1024)
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId  String
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?

  @@index([ticketId])
  @@index([userId])
}
